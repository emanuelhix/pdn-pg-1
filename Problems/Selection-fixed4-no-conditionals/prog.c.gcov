        -:    0:Source:prog.c
        -:    0:Graph:prog.gcno
        -:    0:Data:prog.gcda
        -:    0:Runs:6
        -:    1:/*
        -:    2:Parker Hix
        -:    3:*/
        -:    4:#include <float.h>
        -:    5:#include <stdio.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// removed if-statements in favor of ternary assignments
        2:    9:void selectionSort(float numbers[], int count) {
        8:   10:  for (int outer = 0; outer < count - 1; outer++) {
        -:   11:
        -:   12:    // Assume the current position holds
        -:   13:    // the minimum element
        6:   14:    int minIndex = outer;
        -:   15:
        -:   16:    // Iterate through the unsorted portion
        -:   17:    // to find the actual minimum
       18:   18:    for (int inner = outer + 1; inner < count; inner++) {
       12:   19:      minIndex = numbers[inner] < numbers[minIndex] ? inner : minIndex;
        -:   20:    }
        -:   21:
        -:   22:    // Move minimum element to its
        -:   23:    // correct position
        6:   24:    float swapTemp = numbers[outer];
        6:   25:    numbers[outer] = numbers[minIndex];
        6:   26:    numbers[minIndex] = swapTemp;
        -:   27:  }
        2:   28:}
        -:   29:
        6:   30:int main(int argc, char *argv[]) {
        6:   31:  if (argc != 3) {
        2:   32:    fprintf(stderr, "Usage: %s <input filename> <output filename>\n", argv[0]);
        2:   33:    return 1;
        -:   34:  }
        -:   35:
        4:   36:  const int NUM_VALUES = 4;
        -:   37:
        4:   38:  FILE *infilename = fopen(argv[1], "r");
        4:   39:  if (infilename == NULL) {
        1:   40:    fprintf(stderr, "Error: could not open input file '%s'\n", argv[1]);
        1:   41:    return 1;
        -:   42:  }
        3:   43:  FILE *outfilename = fopen(argv[2], "w");
        -:   44:
        3:   45:  float values[NUM_VALUES];
        -:   46:
       12:   47:  for (int i = 0; i < NUM_VALUES; i++) {
        -:   48:    float value;
       10:   49:    if (fscanf(infilename, "%f", &value) != 1) {
        1:   50:      fprintf(stderr, "Error: failed to read float from input file\n");
        1:   51:      fclose(infilename);
        1:   52:      fclose(outfilename);
        1:   53:      return 1;
        -:   54:    }
        9:   55:    values[i] = value;
        -:   56:  }
        -:   57:
        2:   58:  selectionSort(values, NUM_VALUES);
        -:   59:  
       10:   60:  for (int i = 0; i < NUM_VALUES; i++) {
        8:   61:    fprintf(outfilename, "%0.1f\n", values[i]);
        -:   62:  }
        -:   63:
        2:   64:  fclose(infilename);
        2:   65:  fclose(outfilename);
        -:   66:
        2:   67:  return 0;
        -:   68:}
